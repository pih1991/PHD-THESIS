# For running the FindGMEC protocol in OSPREY
import osprey

osprey.start()

# define a strand
strand = osprey.Strand('1.pdb')
strand.flexibility['A1'].setLibraryRotamers(osprey.WILD_TYPE, 'Glu', 'Asn', 'Gln', 'Arg', 'Ser', 'Cys', 'Thr', 'Tyr', 'Trp', 'Leu', 'Lys', 'Asp', 'Ile', 'Gly', 'Met', 'Phe', 'Pro', 'Val', 'His',)


parallelism = osprey.Parallelism(cpuCores=8, gpus=1, streamsPerGpu=16)

# make the conf space
confSpace = osprey.ConfSpace(strand)

# choose a forcefield
ffparams = osprey.ForcefieldParams()

# how should we compute energies of molecules?
ecalc = osprey.EnergyCalculator(confSpace, ffparams, parallelism=parallelism)

# how should we define energies of conformations?
confEcalc = osprey.ConfEnergyCalculator(confSpace, ecalc)

# how should confs be ordered and searched?
emat = osprey.EnergyMatrix(confEcalc)
astar = osprey.AStarMPLP(emat, confSpace)

# find the best sequence and rotamers
gmec = osprey.GMECFinder(astar, confEcalc).find()

# write the rigid GMEC to a pdb
gmecStructure = confSpace.makeMolecule(gmec.getAssignments())
osprey.writePdb(gmecStructure,  "A6.pdb")


